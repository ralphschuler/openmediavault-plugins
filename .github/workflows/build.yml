---
# prettier-ignore
name: Build & Release OMV Plugins

on:
    pull_request:
    push:
        branches:
            - main
    workflow_dispatch:

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    prepare:
        name: Discover plugins
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.matrix.outputs.matrix }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Build matrix payload
              id: matrix
              run: |
                  python - <<'PY' >>"$GITHUB_OUTPUT"
                  import json
                  import os
                  plugins = sorted(
                      d for d in os.listdir('.')
                      if d.startswith('openmediavault-') and os.path.isdir(d)
                  )
                  print(f"matrix={json.dumps({'plugin': plugins})}")
                  PY

    build:
        name: Build plugin packages
        needs: prepare
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Debian build tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y debhelper devscripts lintian dpkg-dev build-essential

            - name: Parse changelog version
              id: meta
              working-directory: ${{ matrix.plugin }}
              run: |
                  VERSION=$(dpkg-parsechangelog -SVersion)
                  echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            - name: Build .deb package
              working-directory: ${{ matrix.plugin }}
              env:
                  DEBFULLNAME: Inhaus AI
                  DEBEMAIL: dev@inhaus.ai
              run: |
                  dpkg-buildpackage -b -us -uc

            - name: Lint package
              working-directory: ${{ matrix.plugin }}
              run: lintian ../*.deb || true

            - name: Collect artifacts
              working-directory: ${{ matrix.plugin }}
              run: |
                  mkdir -p dist
                  mv ../*.deb dist/

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.plugin }}-${{ steps.meta.outputs.version }}
                  path: ${{ matrix.plugin }}/dist/*.deb

    release:
        name: Publish release
        needs:
            - build
        if: github.event_name != 'pull_request' && needs.build.result == 'success'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: dist

            - name: Create GitHub release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: build-${{ github.run_id }}
                  name: OMV plugins build ${{ github.run_number }}
                  body: |
                      Automated build of OMV plugins.
                  files: dist/**/*.deb
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    publish-pages:
        name: Publish APT repository to GitHub Pages
        needs: build
        if: github.event_name != 'pull_request' && needs.build.result == 'success'
        runs-on: ubuntu-latest
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: dist

            - name: Prepare APT repository content
              env:
                  GITHUB_REPOSITORY: ${{ github.repository }}
              run: |
                  sudo apt-get update
                  sudo apt-get install -y dpkg-dev apt-utils

                  if ! find dist -name '*.deb' -print -quit | grep -q "."; then
                      echo "No Debian packages found in artifacts" >&2
                      exit 1
                  fi

                  mkdir -p public/dists/stable/main/binary-amd64
                  mkdir -p public/pool/main
                  touch public/.nojekyll

                  find dist -name '*.deb' -print0 | while IFS= read -r -d '' deb; do
                      pkg="$(dpkg-deb --field "$deb" Package)"
                      target_dir="public/pool/main/${pkg}"
                      mkdir -p "$target_dir"
                      cp "$deb" "$target_dir/"
                  done

                  pushd public
                  dpkg-scanpackages --multiversion pool/main > dists/stable/main/binary-amd64/Packages
                  gzip -9fc dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz
                  xz -fc dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.xz

                  apt-ftparchive \
                      -o APT::FTPArchive::Release::Origin="OpenMediaVault Plugins" \
                      -o APT::FTPArchive::Release::Label="OpenMediaVault Plugins" \
                      -o APT::FTPArchive::Release::Suite="stable" \
                      -o APT::FTPArchive::Release::Codename="stable" \
                      -o APT::FTPArchive::Release::Architectures="amd64 all" \
                      -o APT::FTPArchive::Release::Components="main" \
                      release dists/stable > dists/stable/Release

                  OWNER="${GITHUB_REPOSITORY%%/*}"
                  REPO_NAME="${GITHUB_REPOSITORY#*/}"
                  SITE_URL="https://${OWNER}.github.io/${REPO_NAME}"
                  cat > index.html <<HTML
                  <!DOCTYPE html>
                  <html lang="en">
                  <head>
                      <meta charset="utf-8" />
                      <title>OpenMediaVault Plugins APT Repository</title>
                      <style>
                          body { font-family: system-ui, sans-serif; margin: 2rem auto; max-width: 48rem; line-height: 1.5; color: #111; }
                          code { background: #f5f5f5; padding: 0.1rem 0.35rem; border-radius: 0.25rem; }
                          pre { background: #f5f5f5; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }
                          h1 { font-size: 2rem; }
                      </style>
                  </head>
                  <body>
                      <h1>OpenMediaVault Plugins APT Repository</h1>
                      <p>The Debian packages produced from <code>${GITHUB_REPOSITORY}</code> are published here.</p>
                      <p>Add the repository to your system by running:</p>
                      <pre><code>echo "deb [trusted=yes] ${SITE_URL} stable main" | sudo tee /etc/apt/sources.list.d/openmediavault-plugins.list
sudo apt update</code></pre>
                      <p>Packages are unsigned; use <code>[trusted=yes]</code> or provide your own signing workflow if required.</p>
                  </body>
                  </html>
                  HTML
                  popd

            - name: Upload GitHub Pages artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: public

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
