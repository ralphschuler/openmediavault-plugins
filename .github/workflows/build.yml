name: Build & Release OMV Plugins

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  prepare:
    name: Discover plugins
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build matrix payload
        id: matrix
        run: |
          python - <<'PY' >>"$GITHUB_OUTPUT"
          import json
          import os
          plugins = sorted(
              d for d in os.listdir('.')
              if d.startswith('openmediavault-') and os.path.isdir(d)
          )
          print(f"matrix={json.dumps({'plugin': plugins})}")
          PY

  build:
    name: Build plugin packages
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Debian build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts lintian dpkg-dev build-essential

      - name: Parse changelog version
        id: meta
        working-directory: ${{ matrix.plugin }}
        run: |
          VERSION=$(dpkg-parsechangelog -SVersion)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build .deb package
        working-directory: ${{ matrix.plugin }}
        env:
          DEBFULLNAME: Inhaus AI
          DEBEMAIL: dev@inhaus.ai
        run: |
          dpkg-buildpackage -b -us -uc

      - name: Lint package
        working-directory: ${{ matrix.plugin }}
        run: lintian ../*.deb || true

      - name: Collect artifacts
        working-directory: ${{ matrix.plugin }}
        run: |
          mkdir -p dist
          mv ../*.deb dist/

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-${{ steps.meta.outputs.version }}
          path: ${{ matrix.plugin }}/dist/*.deb

  test-install:
    name: Test package installation
    needs: [prepare, build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Parse changelog version
        id: meta
        working-directory: ${{ matrix.plugin }}
        run: |
          VERSION=$(dpkg-parsechangelog -SVersion)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.plugin }}-${{ steps.meta.outputs.version }}
          path: packages/

      - name: Test package installation
        run: |
          # Install the package and verify it can be installed successfully
          echo "Testing installation of ${{ matrix.plugin }}"

          # Find the .deb file
          DEB_FILE=$(find packages/ -name "*.deb" -type f | head -n1)
          if [ -z "$DEB_FILE" ]; then
            echo "ERROR: No .deb file found for ${{ matrix.plugin }}"
            exit 1
          fi

          echo "Found package: $DEB_FILE"

          # Test package metadata
          echo "=== Package Information ==="
          dpkg-deb --info "$DEB_FILE"

          echo -e "\n=== Package Contents ==="
          dpkg-deb --contents "$DEB_FILE"

          # Test package installation (dry-run first)
          echo -e "\n=== Testing Package Installation ==="
          echo "Testing dry-run installation..."
          sudo dpkg --dry-run -i "$DEB_FILE" || {
            echo "WARNING: Dry-run installation failed, this might be expected due to missing dependencies"
          }

          # Verify package structure and required files
          echo -e "\n=== Verifying Package Structure ==="
          dpkg-deb --fsys-tarfile "$DEB_FILE" | tar -tf - | head -20

          # Verify package can be extracted
          echo -e "\n=== Testing Package Extraction ==="
          mkdir -p /tmp/test-extract
          dpkg-deb --extract "$DEB_FILE" /tmp/test-extract
          echo "Extracted files:"
          find /tmp/test-extract -type f | head -10

          echo -e "\nâœ“ Package ${{ matrix.plugin }} passed all installation tests"

  release:
    name: Publish release
    needs:
      - build
      - test-install
    if: >-
      github.event_name != 'pull_request' &&
      needs.build.result == 'success' &&
      needs.test-install.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_id }}
          name: OMV plugins build ${{ github.run_number }}
          body: |
            Automated build of OMV plugins.
          files: dist/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pages:
    name: Publish APT repository to GitHub Pages
    needs: [build, test-install]
    if: >-
      github.event_name != 'pull_request' &&
      needs.build.result == 'success' &&
      needs.test-install.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare APT repository content
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils

                  if ! find dist -name '*.deb' -print -quit | grep -q "."; then
                      echo "No Debian packages found in artifacts" >&2
                      exit 1
                  fi

                  mkdir -p public/dists/stable/main/binary-amd64
                  mkdir -p public/dists/stable/main/binary-arm64
                  mkdir -p public/dists/stable/main/binary-all
                  mkdir -p public/pool/main
                  touch public/.nojekyll

                  find dist -name '*.deb' -print0 | while IFS= read -r -d '' deb; do
                      pkg="$(dpkg-deb --field "$deb" Package)"
                      target_dir="public/pool/main/${pkg}"
                      mkdir -p "$target_dir"
                      cp "$deb" "$target_dir/"
                  done

                  pushd public
                  # Since all packages are Architecture: all, we create package lists for all architectures
                  dpkg-scanpackages --multiversion pool/main > dists/stable/main/binary-all/Packages
                  gzip -9fc dists/stable/main/binary-all/Packages > dists/stable/main/binary-all/Packages.gz
                  xz -fc dists/stable/main/binary-all/Packages > dists/stable/main/binary-all/Packages.xz

                  # Create symlinks for architecture-specific directories
                  ln -s ../binary-all/Packages dists/stable/main/binary-amd64/Packages
                  ln -s ../binary-all/Packages.gz dists/stable/main/binary-amd64/Packages.gz
                  ln -s ../binary-all/Packages.xz dists/stable/main/binary-amd64/Packages.xz

                  ln -s ../binary-all/Packages dists/stable/main/binary-arm64/Packages
                  ln -s ../binary-all/Packages.gz dists/stable/main/binary-arm64/Packages.gz
                  ln -s ../binary-all/Packages.xz dists/stable/main/binary-arm64/Packages.xz

                  apt-ftparchive \
                      -o APT::FTPArchive::Release::Origin="OpenMediaVault Plugins" \
                      -o APT::FTPArchive::Release::Label="OpenMediaVault Plugins" \
                      -o APT::FTPArchive::Release::Suite="stable" \
                      -o APT::FTPArchive::Release::Codename="stable" \
                      -o APT::FTPArchive::Release::Architectures="amd64 arm64 all" \
                      -o APT::FTPArchive::Release::Components="main" \
                      release dists/stable > dists/stable/Release

                  OWNER="${GITHUB_REPOSITORY%%/*}"
                  REPO_NAME="${GITHUB_REPOSITORY#*/}"
                  SITE_URL="https://${OWNER}.github.io/${REPO_NAME}"
                  BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

                  # Generate plugin cards from available packages
                  PLUGIN_CARDS=""
                  for deb in pool/main/*/*.deb; do
                      if [ -f "$deb" ]; then
                          PKG_NAME=$(dpkg-deb --field "$deb" Package)
                          PKG_VERSION=$(dpkg-deb --field "$deb" Version)
                          PKG_DESC=$(dpkg-deb --field "$deb" Description | head -n1)

                          # Extract plugin name (remove openmediavault- prefix)
                          PLUGIN_NAME=${PKG_NAME#openmediavault-}

                          # Determine service description based on plugin name
                          case "$PLUGIN_NAME" in
                              "immich") SERVICE_DESC="Self-hosted photo and video management solution" ;;
                              "gitea") SERVICE_DESC="Self-hosted Git service with web interface" ;;
                              "drone") SERVICE_DESC="Continuous integration platform" ;;
                              "storecli") SERVICE_DESC="StoreCLI monitoring and management tool" ;;
                              *) SERVICE_DESC="$PKG_DESC" ;;
                          esac

                          PLUGIN_CARDS="${PLUGIN_CARDS}
                          <div class=\"plugin-card\">
                              <div class=\"plugin-name\">${PLUGIN_NAME^}</div>
                              <div class=\"plugin-version\">v${PKG_VERSION}</div>
                              <div class=\"plugin-description\">${SERVICE_DESC}</div>
                              <div class=\"install-command\">sudo apt install ${PKG_NAME}</div>
                          </div>"
                      fi
                  done

                  # Use the enhanced template
                  cp ../docs-template.html index.html

                  # Create temporary files for replacement to handle multiline content
                  printf '%s\n' "$PLUGIN_CARDS" > /tmp/plugin_cards.tmp

                  # Replace placeholders with actual values using proper escaping
                  sed -i "s|__GITHUB_REPOSITORY__|${GITHUB_REPOSITORY}|g" index.html
                  sed -i "s|__SITE_URL__|${SITE_URL}|g" index.html
                  sed -i "s|__BUILD_DATE__|${BUILD_DATE}|g" index.html

                  # Use a more robust method for multiline replacement
                  python3 << 'EOF'


                  # Read the HTML file
                  with open('index.html', 'r') as f:
                      content = f.read()

                  # Read the plugin cards
                  with open('/tmp/plugin_cards.tmp', 'r') as f:
                      plugin_cards = f.read().strip()

                  # Replace the placeholder
                  content = content.replace('__PLUGIN_CARDS__', plugin_cards)

                  # Write back
                  with open('index.html', 'w') as f:
                      f.write(content)
                  EOF
                  popd

            - name: Upload GitHub Pages artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: public

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
