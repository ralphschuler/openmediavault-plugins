name: Build & Release OMV Plugins

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  determine:
    name: Determine changed plugins
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      has_changes: ${{ steps.matrix.outputs.has_changes }}
      versions: ${{ steps.versions.outputs.versions }}
      payload: ${{ steps.changed.outputs.payload }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve base and head refs
        id: refs
        run: |
          EVENT="${{ github.event_name }}"
          if [ "$EVENT" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
          elif [ -n "${{ github.event.before }}" ]; then
            BASE="${{ github.event.before }}"
          else
            BASE=$(git rev-parse HEAD^)
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Detect changed plugins
        id: changed
        env:
          BASE_REF: ${{ steps.refs.outputs.base }}
          HEAD_REF: ${{ steps.refs.outputs.head }}
        run: |
          python scripts/list_changed_plugins.py > changed.json
          python - <<'PY' >> "$GITHUB_OUTPUT"
import json
with open('changed.json', 'r', encoding='utf-8') as fh:
    payload = json.load(fh)
print('payload=' + json.dumps(payload))
PY

      - name: Build matrix payload
        id: matrix
        env:
          PAYLOAD: ${{ steps.changed.outputs.payload }}
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
import json
import os
payload = json.loads(os.environ['PAYLOAD'])
plugins = payload.get('plugins', [])
matrix = {'plugin': plugins}
print('matrix=' + json.dumps(matrix))
print('has_changes=' + ('true' if plugins else 'false'))
PY

      - name: Collect plugin versions
        id: versions
        if: steps.matrix.outputs.has_changes == 'true'
        env:
          PAYLOAD: ${{ steps.changed.outputs.payload }}
        run: |
          PLUGINS=$(python - <<'PY'
import json
import os
payload = json.loads(os.environ['PAYLOAD'])
print(' '.join(payload.get('plugins', [])))
PY
)
          if [ -z "$PLUGINS" ]; then
            echo "versions={}" >> "$GITHUB_OUTPUT"
          else
            python scripts/get_plugin_versions.py $PLUGINS > versions.json
            python - <<'PY' >> "$GITHUB_OUTPUT"
import json
with open('versions.json', 'r', encoding='utf-8') as fh:
    versions = json.load(fh)
print('versions=' + json.dumps(versions))
PY
          fi

  build:
    name: Build plugin packages
    needs: determine
    if: needs.determine.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Debian build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts lintian dpkg-dev build-essential

      - name: Parse changelog version
        id: meta
        working-directory: ${{ matrix.plugin }}
        run: |
          VERSION=$(dpkg-parsechangelog -SVersion)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build .deb package
        working-directory: ${{ matrix.plugin }}
        env:
          DEBFULLNAME: Inhaus AI
          DEBEMAIL: dev@inhaus.ai
        run: |
          dpkg-buildpackage -b -us -uc

      - name: Lint package
        working-directory: ${{ matrix.plugin }}
        run: lintian ../*.deb || true

      - name: Collect artifacts
        working-directory: ${{ matrix.plugin }}
        run: |
          mkdir -p dist
          mv ../*.deb dist/

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-${{ steps.meta.outputs.version }}
          path: ${{ matrix.plugin }}/dist/*.deb

  release:
    name: Publish release
    needs:
      - determine
      - build
    if: needs.determine.outputs.has_changes == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release notes
        id: notes
        env:
          VERSIONS: ${{ needs.determine.outputs.versions }}
        run: |
          python - <<'PY' > release_notes.md
import json
import os
versions = json.loads(os.environ.get('VERSIONS', '{}'))
lines = ["## Updated plugins\n"]
for plugin, version in sorted(versions.items()):
    lines.append(f"- {plugin} {version}")
print('\n'.join(lines))
PY

      - name: Create and push tags
        env:
          VERSIONS: ${{ needs.determine.outputs.versions }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          python - <<'PY'
import json
import os
import subprocess
versions = json.loads(os.environ.get('VERSIONS', '{}'))
for plugin, version in versions.items():
    tag = f"{plugin}-v{version}"
    subprocess.run(["git", "tag", "-f", tag], check=True)
repo_tag = f"v0.0.{os.environ.get('GITHUB_RUN_NUMBER')}"
subprocess.run(["git", "tag", "-f", repo_tag], check=True)
PY
          git push --force --tags

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v0.0.${{ github.run_number }}
          name: OMV plugins release ${{ github.run_number }}
          body_path: release_notes.md
          files: dist/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
