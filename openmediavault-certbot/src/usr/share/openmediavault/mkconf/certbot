#!/usr/bin/env bash
set -euo pipefail

SERVICE="certbot"

. /usr/share/openmediavault/scripts/helper-functions

config_get() {
        local key="$1"
        omv_config_get "/config/services/${SERVICE}/${key}"
}

log_info() {
        omv_log "$SERVICE" "$1"
}

require_command() {
        if ! command -v "$1" >/dev/null 2>&1; then
                echo "${SERVICE}: missing dependency '$1'" >&2
                exit 1
        fi
}

compose_dir() {
        local path
        path="$(config_get composepath)"
        if [ -z "$path" ]; then
                path="/srv/dev-disk-by-label-data/${SERVICE}"
        fi
        printf '%s' "$path"
}

ensure_structure() {
        local dir="$1"
        mkdir -p "$dir" "$dir/www" "$dir/etc-letsencrypt" "$dir/var-lib-letsencrypt" "$dir/logs"
}

write_env() {
        local dir="$1"
        local env_file="$dir/.env"
        local email domains staging
        email="$(config_get email)"
        domains="$(config_get domains)"
        staging="$(config_get staging)"
        if [ -z "$staging" ]; then
                staging="1"
        fi
        cat >"$env_file" <<EOF_ENV
CERTBOT_EMAIL=${email}
CERTBOT_DOMAINS=${domains}
CERTBOT_STAGING=${staging}
EOF_ENV
        chmod 600 "$env_file"
        log_info "Updated environment file at $env_file"
}

write_nginx_config() {
        local dir="$1"
        cat >"$dir/nginx.conf" <<'EOF_NGINX'
events {}
http {
    server {
        listen 8080;
        server_name _;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
    }
}
EOF_NGINX
}

write_compose() {
        local dir="$1"
        local compose_file="$dir/docker-compose.yml"
        local http_port
        http_port="$(config_get httpport)"
        cat >"$compose_file" <<EOF_YAML
name: ${SERVICE}

services:
  certbot:
    image: certbot/certbot:latest
    env_file:
      - .env
    volumes:
      - ./etc-letsencrypt:/etc/letsencrypt
      - ./var-lib-letsencrypt:/var/lib/letsencrypt
      - ./www:/var/www/certbot
      - ./logs:/var/log/letsencrypt
    command:
      - sh
      - -c
      - |
        if [ -z "${CERTBOT_EMAIL}" ] || [ -z "${CERTBOT_DOMAINS}" ]; then
          echo "Please configure CERTBOT_EMAIL and CERTBOT_DOMAINS in ${PWD}/.env" >&2
          sleep 3600
        fi
        while true; do
          if ls /etc/letsencrypt/live 1>/dev/null 2>&1 && find /etc/letsencrypt/live -name fullchain.pem -maxdepth 2 | grep -q fullchain.pem; then
            certbot renew --webroot --webroot-path /var/www/certbot --agree-tos --non-interactive --email "${CERTBOT_EMAIL}" --domains "${CERTBOT_DOMAINS}" $( [ "${CERTBOT_STAGING}" = "1" ] && echo "--staging" )
          else
            certbot certonly --webroot --webroot-path /var/www/certbot --agree-tos --non-interactive --email "${CERTBOT_EMAIL}" --domains "${CERTBOT_DOMAINS}" $( [ "${CERTBOT_STAGING}" = "1" ] && echo "--staging" )
          fi
          sleep 12h
        done
    restart: unless-stopped
    depends_on:
      - nginx

  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./www:/var/www/certbot
    ports:
      - "${http_port}:8080"
    restart: unless-stopped
EOF_YAML
        log_info "Rendered compose file at $compose_file"
}

compose_cmd() {
        local dir="$1"
        shift
        (cd "$dir" && COMPOSE_PROJECT_NAME="$SERVICE" docker compose -f docker-compose.yml "$@")
}

install_stack() {
        require_command docker
        local dir
        dir="$(compose_dir)"
        ensure_structure "$dir"
        write_env "$dir"
        write_nginx_config "$dir"
        write_compose "$dir"
        log_info "Deploying Certbot"
        compose_cmd "$dir" pull
        compose_cmd "$dir" up -d
}

remove_stack() {
        local dir="$(compose_dir)"
        if [ -f "$dir/docker-compose.yml" ]; then
                compose_cmd "$dir" down --remove-orphans || true
                log_info "Removed Certbot containers"
        fi
}

restart_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" up -d --remove-orphans
        log_info "Restarted Certbot"
}

status_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" ps
}

logs_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" logs --tail=200
}

usage() {
        cat <<EOF_USAGE
Usage: $0 <install|remove|restart|status|logs>
EOF_USAGE
}

main() {
        local action="${1:-status}"
        case "$action" in
                install)
                        install_stack
                        ;;
                remove)
                        remove_stack
                        ;;
                restart)
                        restart_stack
                        ;;
                status)
                        status_stack
                        ;;
                logs)
                        logs_stack
                        ;;
                *)
                        usage >&2
                        exit 1
                        ;;
        esac
}

main "$@"
