#!/usr/bin/env bash
set -euo pipefail

SERVICE="drone"

. /usr/share/openmediavault/scripts/helper-functions

config_get() {
        local key="$1"
        omv_config_get "/config/services/${SERVICE}/${key}"
}

log_info() {
        omv_log "$SERVICE" "$1"
}

require_command() {
        if ! command -v "$1" >/dev/null 2>&1; then
                echo "${SERVICE}: missing dependency '$1'" >&2
                exit 1
        fi
}

generate_secret() {
        tr -dc 'A-Za-z0-9' </dev/urandom | head -c "${1:-32}"
}

compose_dir() {
        local path
        path="$(config_get composepath)"
        if [ -z "$path" ]; then
                path="/srv/dev-disk-by-label-data/${SERVICE}"
        fi
        printf '%s' "$path"
}

ensure_env_file() {
        local dir="$1"
        local env_file="$dir/.env"
        if [ -f "$env_file" ]; then
                return 0
        fi

        mkdir -p "$dir"
        local secret
        secret="$(generate_secret 48)"

        cat >"$env_file" <<EOF_ENV
DRONE_RPC_SECRET=${secret}
DRONE_SERVER_HOST=${DRONE_SERVER_HOST:-drone.local}
DRONE_SERVER_PROTO=http
EOF_ENV
        chmod 600 "$env_file"
        log_info "Created default environment at $env_file"
}

write_compose() {
        local dir="$1"
        local compose_file="$dir/docker-compose.yml"
        local port
        port="$(config_get serverport)"
        cat >"$compose_file" <<EOF_YAML
name: ${SERVICE}

services:
  drone-server:
    image: drone/drone:2
    env_file:
      - .env
    environment:
      DRONE_DATABASE_DRIVER: sqlite3
      DRONE_DATABASE_DATASOURCE: /data/database.sqlite
      DRONE_RUNNER_CAPACITY: 2
    volumes:
      - ./data:/data
    ports:
      - "${port}:80"
    restart: unless-stopped

  drone-runner:
    image: drone/drone-runner-docker:1
    env_file:
      - .env
    environment:
      DRONE_RPC_HOST: drone-server
      DRONE_RPC_PROTO: http
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: 2
      DRONE_RUNNER_NAME: openmediavault
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone-server
    restart: unless-stopped
EOF_YAML
        log_info "Rendered compose file at $compose_file"
}

compose_cmd() {
        local dir="$1"
        shift
        (cd "$dir" && COMPOSE_PROJECT_NAME="$SERVICE" docker compose -f docker-compose.yml "$@")
}

install_stack() {
        require_command docker
        local dir
        dir="$(compose_dir)"
        mkdir -p "$dir/data"
        ensure_env_file "$dir"
        write_compose "$dir"
        log_info "Deploying Drone"
        compose_cmd "$dir" pull
        compose_cmd "$dir" up -d
}

remove_stack() {
        local dir="$(compose_dir)"
        if [ -f "$dir/docker-compose.yml" ]; then
                compose_cmd "$dir" down --remove-orphans || true
                log_info "Removed Drone containers"
        fi
}

restart_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" up -d --remove-orphans
        log_info "Restarted Drone"
}

status_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" ps
}

logs_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" logs --tail=200
}

usage() {
        cat <<EOF_USAGE
Usage: $0 <install|remove|restart|status|logs>
EOF_USAGE
}

main() {
        local action="${1:-status}"
        case "$action" in
                install)
                        install_stack
                        ;;
                remove)
                        remove_stack
                        ;;
                restart)
                        restart_stack
                        ;;
                status)
                        status_stack
                        ;;
                logs)
                        logs_stack
                        ;;
                *)
                        usage >&2
                        exit 1
                        ;;
        esac
}

main "$@"
