#!/usr/bin/env bash
set -euo pipefail

SERVICE="immich"
LOG_TAG="immich"

. /usr/share/openmediavault/scripts/helper-functions

config_get() {
        local key="$1"
        omv_config_get "/config/services/${SERVICE}/${key}"
}

log_info() {
        local message="$1"
        omv_log "$LOG_TAG" "$message"
}

require_command() {
        local cmd="$1"
        if ! command -v "$cmd" >/dev/null 2>&1; then
                echo "${SERVICE}: missing dependency "$cmd"" >&2
                exit 1
        fi
}

generate_secret() {
        tr -dc 'A-Za-z0-9' </dev/urandom | head -c "${1:-32}"
}

compose_dir() {
        local path
        path="$(config_get composepath)"
        if [ -z "$path" ]; then
                path="/srv/dev-disk-by-label-data/${SERVICE}"
        fi
        printf '%s' "$path"
}

ensure_env_file() {
        local dir="$1"
        local env_file="$dir/.env"
        if [ -f "$env_file" ]; then
                return 0
        fi

        mkdir -p "$dir"
        local tz
        tz="$(config_get timezone)"
        if [ -z "$tz" ] && [ -f /etc/timezone ]; then
                tz="$(cat /etc/timezone)"
        fi
        if [ -z "$tz" ]; then
                tz="UTC"
        fi

        local db_password
        db_password="$(generate_secret 32)"

        cat >"$env_file" <<EOF_ENV
TZ=${tz}
IMMICH_VERSION=release
UPLOAD_LOCATION=${dir}/library
DB_DATA_LOCATION=${dir}/postgres
DB_USERNAME=immich
DB_PASSWORD=${db_password}
DB_DATABASE_NAME=immich
EOF_ENV
        chmod 600 "$env_file"
        log_info "Created default environment file at $env_file"
}

write_compose() {
        local dir="$1"
        local compose_file="$dir/docker-compose.yml"
        local server_port web_port
        server_port="$(config_get serverport)"
        web_port="$(config_get webport)"
        cat >"$compose_file" <<EOF_YAML
name: ${SERVICE}

services:
  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    env_file:
      - .env
    volumes:
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${server_port}:2283"
      - "${web_port}:3001"
    depends_on:
      - redis
      - database
    restart: unless-stopped

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    env_file:
      - .env
    volumes:
      - model-cache:/cache
    restart: unless-stopped

  redis:
    image: docker.io/valkey/valkey:8-bookworm
    restart: unless-stopped

  database:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      TZ: ${TZ}
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  model-cache:
EOF_YAML
        log_info "Rendered compose file at $compose_file"
}

compose_cmd() {
        local dir="$1"
        shift
        (cd "$dir" && COMPOSE_PROJECT_NAME="$SERVICE" docker compose -f docker-compose.yml "$@")
}

install_stack() {
        require_command docker
        local dir
        dir="$(compose_dir)"
        mkdir -p "$dir" "$dir/library" "$dir/postgres"
        ensure_env_file "$dir"
        write_compose "$dir"
        log_info "Bringing up Immich stack"
        compose_cmd "$dir" pull
        compose_cmd "$dir" up -d
}

remove_stack() {
        local dir="$(compose_dir)"
        if [ -f "$dir/docker-compose.yml" ]; then
                compose_cmd "$dir" down --remove-orphans || true
                log_info "Removed Immich containers"
        fi
}

restart_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" up -d --remove-orphans
        log_info "Restarted Immich stack"
}

status_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" ps
}

logs_stack() {
        local dir="$(compose_dir)"
        compose_cmd "$dir" logs --tail=200
}

usage() {
        cat <<EOF_USAGE
Usage: $0 <install|remove|restart|status|logs>
EOF_USAGE
}

main() {
        local action="${1:-status}"
        case "$action" in
                install)
                        install_stack
                        ;;
                remove)
                        remove_stack
                        ;;
                restart)
                        restart_stack
                        ;;
                status)
                        status_stack
                        ;;
                logs)
                        logs_stack
                        ;;
                *)
                        usage >&2
                        exit 1
                        ;;
        esac
}

main "$@"
